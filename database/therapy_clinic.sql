-- Therapy Clinic Database Schema
CREATE DATABASE IF NOT EXISTS therapy_clinic;
USE therapy_clinic;

-- Central USERS table with role-based authentication
CREATE TABLE IF NOT EXISTS USERS (
  USER_ID INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(80) NOT NULL UNIQUE,
  password VARCHAR(200) NOT NULL,
  ROLE ENUM('admin', 'therapist', 'parent', 'student') NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  latitude DECIMAL(10, 8),
  longitude DECIMAL(11, 8)
);

-- ADMIN table extending from USERS
CREATE TABLE IF NOT EXISTS ADMIN (
  ADMIN_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT NOT NULL UNIQUE,
  FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- PARENT table extending from USERS
CREATE TABLE IF NOT EXISTS PARENT (
  PARENT_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT NOT NULL UNIQUE,
  FirstName VARCHAR(80) NOT NULL,
  LastName VARCHAR(80) NOT NULL,
  Phone_number VARCHAR(20),
  DOB DATE,
  Gender ENUM('male', 'female'),
  FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- STUDENT table extending from USERS
CREATE TABLE IF NOT EXISTS STUDENT (
  STUDENT_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT NOT NULL UNIQUE,
  FirstName VARCHAR(80) NOT NULL,
  LastName VARCHAR(80) NOT NULL,
  Phone_number VARCHAR(20),
  DOB DATE NOT NULL,
  Gender ENUM('male', 'female'),
  FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- THERAPIST table extending from USERS, with admin verification
CREATE TABLE IF NOT EXISTS THERAPIST (
  THERAPIST_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT NOT NULL UNIQUE,
  FirstName VARCHAR(80) NOT NULL,
  LastName VARCHAR(80) NOT NULL,
  CERT_Number VARCHAR(50),
  Gender ENUM('male', 'female'),
  ADMIN_ID INT,
  FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
  FOREIGN KEY (ADMIN_ID) REFERENCES ADMIN(ADMIN_ID)
);

-- GUARDIAN table for parent-student relationships with relation type
CREATE TABLE IF NOT EXISTS GUARDIAN (
  GUARDIAN_ID INT AUTO_INCREMENT PRIMARY KEY,
  PARENT_ID INT NOT NULL,
  STUDENT_ID INT NOT NULL,
  Relation VARCHAR(50),
  FOREIGN KEY (PARENT_ID) REFERENCES PARENT(PARENT_ID),
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
  UNIQUE (PARENT_ID, STUDENT_ID)
);

-- AVAILABILITY table for therapist availability
CREATE TABLE IF NOT EXISTS AVAILABILITY (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  THERAPIST_ID INT NOT NULL,
  Date DATE NOT NULL,
  Start_Time TIME NOT NULL,
  End_Time TIME NOT NULL,
  Status ENUM('available', 'not_available') DEFAULT 'available',
  FOREIGN KEY (THERAPIST_ID) REFERENCES THERAPIST(THERAPIST_ID),
  UNIQUE (THERAPIST_ID, Date, Start_Time)
);

-- APPOINTMENTS table
CREATE TABLE IF NOT EXISTS APPOINTMENTS (
  Appointment_ID INT AUTO_INCREMENT PRIMARY KEY,
  STUDENT_ID INT NOT NULL,
  AVAILABILITY_ID INT NOT NULL,
  Appointment_time DATETIME NOT NULL,
  Status ENUM('pending', 'confirmed', 'cancelled') DEFAULT 'pending',
  Appointment_type ENUM('virtual', 'in_person') NOT NULL,
  Meeting_link VARCHAR(255),
  Reason_for_meeting TEXT,
  PARENTID INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
  FOREIGN KEY (AVAILABILITY_ID) REFERENCES AVAILABILITY(ID),
  FOREIGN KEY (PARENTID) REFERENCES PARENT(PARENT_ID)
);